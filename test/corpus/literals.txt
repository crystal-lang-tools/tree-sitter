======================
Quoted string literals
======================

"hello world"

---

(source_file
	(string (quoted_string)))

=======================
Percent string literals
=======================

%(parenthesised strings)

%[bracket strings]

%{braced strings}

%<whatever these are called string>

%|and pipe strings|

%q(and ones with an optional q)

---

(source_file
	(string (percent_string))
	(string (percent_string))
	(string (percent_string))
	(string (percent_string))
	(string (percent_string))
	(string (percent_string)))

==============
Regex literals
==============

/matches regex literal/

"/but not ones in strings/"

/also doesn't match \/ escaped ones/

---

(source_file
	(regex_literal)
	(string
		(quoted_string))
	(regex_literal))

================
Integer literals
================

123_456

0b1010101110

0o644_u16

0xFc4d3e

0

---

(source_file
	(integer)
	(integer)
	(integer)
	(integer)
	(integer))

==============
Float literals
==============

0.0

3.14159265

42.0e3f32

---

(source_file
	(float)
	(float)
	(float))

===========
Nil literal
===========

nil

---

(source_file (nil))

================
Boolean literals
================

true
false

---

(source_file (true) (false))

==============
Array literals
==============

[1, 2, 3]

["foo", "bar"] of String

[] of Int32

---

(source_file
	(array
		(integer)
		(integer)
		(integer))
	(array
		(string (quoted_string))
		(string (quoted_string))
		(constant))
	(array (constant)))

=============
Hash literals
=============

{"foo" => "bar"}

{1 => "one", 2 => "two"}

{} of Int32 => String

{1.2 => 1, 4.5 => 5} of Float32 => Int32

---

(source_file
	(hash
		(string (quoted_string))
		(string (quoted_string)))
	(hash
		(integer)
		(string (quoted_string))
		(integer)
		(string (quoted_string)))
	(hash
		(constant)
		(constant))
	(hash
		(float)
		(integer)
		(float)
		(integer)
		(constant)
		(constant)))

=============
Proc literals
=============

-> { }

-> : Nil { nil }

-> do
  "hello world"
end

-> (x) { x }

-> (x, y) { }

-> (a : Int32, b : Int32) do
  a
  b
end

---

(source_file
	(proc
		(block (brace_block)))
	(proc
		(constant)
		(block (brace_block
			(nil))))
	(proc
		(block (do_end_block
			(string (quoted_string)))))
	(proc
		(proc_param (identifier))
		(block (brace_block
			(identifier))))
	(proc
		(proc_param
			(identifier))
		(proc_param
			(identifier))
		(block (brace_block)))
	(proc
		(proc_param
			(identifier)
			(constant))
		(proc_param
			(identifier)
			(constant))
		(block (do_end_block
			(identifier)
			(identifier)))))

=============
Char literals
=============

'a'

'\0'

'„ÅÇ'

'"'

' '

'\\'

'\u{0}'

'\u00aF'

'\u{10FFFF}'

---

(source_file
	(char)
	(char)
	(char)
	(char)
	(char)
	(char)
	(char)
	(char)
	(char))

===============
Symbol literals
===============

:symbol

:some_symbol

:"some string symbol"

---

(source_file
  (symbol
    (identifier))
  (symbol
    (identifier))
  (symbol
    (string
      (quoted_string))))

=========
Variables
=========

variable

@instance_var

@@class_var

self

---

(source_file
	(identifier)
	(instance_variable
		(identifier))
	(class_variable
		(identifier))
	(self))

========
Comments
========

# matches comments

"but not ones # in strings"

---

(source_file
	(comment)
	(string
		(quoted_string)))

================
Pseudo constants
================

__LINE__

__END_LINE__

__FILE__

__DIR__

---

(source_file
  (line_pseudo_constant)
  (endline_pseudo_constant)
  (file_pseudo_constant)
  (dir_pseudo_constant))
